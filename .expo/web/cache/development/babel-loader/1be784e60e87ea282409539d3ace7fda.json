{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var GetAll = function GetAll() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setLoading = _useState2[1];\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    data = _useState4[0],\n    setData = _useState4[1];\n  var url = 'https://dev-agwa-public-static-assets-web.s3-us-west-2.amazonaws.com/data/catalogs/agwafarm.json';\n  var getPlants = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(url, {\n          method: 'GET',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            firstParam: categories\n          })\n        });\n        var json = yield response.json();\n        setData(json.categories);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function getPlants() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    getPlants();\n    if (data) {\n      console.log(data);\n    }\n  }, []);\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      padding: 24\n    },\n    children: isLoading ? _jsx(ActivityIndicator, {}) : _jsx(FlatList, {\n      data: data,\n      keyExtractor: function keyExtractor(_ref2, index) {\n        var id = _ref2.id;\n        return id;\n      },\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item;\n        return _jsx(Text, {\n          children: item.name\n        });\n      }\n    })\n  });\n};","map":{"version":3,"names":["React","useEffect","useState","GetAll","isLoading","setLoading","data","setData","url","getPlants","response","fetch","method","headers","Accept","body","JSON","stringify","firstParam","categories","json","error","console","log","flex","padding","index","id","item","name"],"sources":["C:/Users/PC/Desktop/projects/agwa/KoralApp/services/GetAll.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ActivityIndicator, FlatList, Text, View } from 'react-native';\r\n\r\nexport const GetAll = () => {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [data, setData] = useState();\r\n    const url = 'https://dev-agwa-public-static-assets-web.s3-us-west-2.amazonaws.com/data/catalogs/agwafarm.json'\r\n\r\n\r\n\r\n    const getPlants = async () => {\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: 'GET',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    firstParam: categories,\r\n                    \r\n                }),\r\n            });\r\n            const json = await response.json();\r\n            setData(json.categories);\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPlants();\r\n        if (data) {\r\n            console.log(data);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <View style={{ flex: 1, padding: 24 }}>\r\n            {isLoading ? <ActivityIndicator /> : (\r\n                <FlatList\r\n                    data={data}\r\n                    keyExtractor={({ id }, index) => id}\r\n                    renderItem={({ item }) => (\r\n                        <Text>{item.name}</Text>\r\n                    )}\r\n                />\r\n            )}\r\n        </View>\r\n    );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAGnD,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAM,GAAS;EACxB,gBAAgCD,QAAQ,CAAC,IAAI,CAAC;IAAA;IAAvCE,SAAS;IAAEC,UAAU;EAC5B,iBAAwBH,QAAQ,EAAE;IAAA;IAA3BI,IAAI;IAAEC,OAAO;EACpB,IAAMC,GAAG,GAAG,kGAAkG;EAI9G,IAAMC,SAAS;IAAA,6BAAG,aAAY;MAC1B,IAAI;QACA,IAAMC,QAAQ,SAASC,KAAK,CAACH,GAAG,EAAE;UAC9BI,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACLC,MAAM,EAAE,kBAAkB;YAC1B,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACjBC,UAAU,EAAEC;UAEhB,CAAC;QACL,CAAC,CAAC;QACF,IAAMC,IAAI,SAASV,QAAQ,CAACU,IAAI,EAAE;QAClCb,OAAO,CAACa,IAAI,CAACD,UAAU,CAAC;MAC5B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACxB,CAAC,SAAS;QACNhB,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAAA,gBApBKI,SAAS;MAAA;IAAA;EAAA,GAoBd;EAEDR,SAAS,CAAC,YAAM;IACZQ,SAAS,EAAE;IACX,IAAIH,IAAI,EAAE;MACNgB,OAAO,CAACC,GAAG,CAACjB,IAAI,CAAC;IACrB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OACI,KAAC,IAAI;IAAC,KAAK,EAAE;MAAEkB,IAAI,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAG,CAAE;IAAA,UACjCrB,SAAS,GAAG,KAAC,iBAAiB,KAAG,GAC9B,KAAC,QAAQ;MACL,IAAI,EAAEE,IAAK;MACX,YAAY,EAAE,6BAASoB,KAAK;QAAA,IAAXC,EAAE,SAAFA,EAAE;QAAA,OAAcA,EAAE;MAAA,CAAC;MACpC,UAAU,EAAE;QAAA,IAAGC,IAAI,SAAJA,IAAI;QAAA,OACf,KAAC,IAAI;UAAA,UAAEA,IAAI,CAACC;QAAI,EAAQ;MAAA;IAC1B;EAET,EACE;AAEf,CAAC"},"metadata":{},"sourceType":"module"}